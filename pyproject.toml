[build-system]
requires = ["setuptools>=61.0", "wheel>=0.37.0"]
build-backend = "setuptools.build_meta"

[project]
name = "oran-nephio-rag"
version = "1.0.0"
description = "O-RAN Ã— Nephio RAG System - Intelligent Retrieval-Augmented Generation"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Development Team", email = "dev-team@company.com"}
]
maintainers = [
    {name = "Development Team", email = "dev-team@company.com"}
]
keywords = [
    "oran", "nephio", "rag", "ai", "langchain", "anthropic",
    "vector-database", "document-retrieval", "nlp", "5g", "telecom"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: System :: Networking",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Operating System :: OS Independent",
]
requires-python = ">=3.9"
dependencies = [
    "langchain>=0.1.0,<0.4.0",
    "langchain-community>=0.0.20,<0.4.0",
    "langchain-anthropic>=0.1.0,<0.4.0",
    "langchain-huggingface>=0.0.1,<0.4.0",
    "sentence-transformers>=2.2.2,<4.0.0",
    "chromadb>=0.4.0,<0.6.0",
    "numpy>=1.24.0,<2.0.0",
    "requests>=2.28.0,<3.0.0",
    "beautifulsoup4>=4.11.0,<5.0.0",
    "lxml>=4.9.0,<5.0.0",
    "python-dotenv>=1.0.0,<2.0.0",
    "pydantic>=2.4.0,<3.0.0",
    "pydantic-settings>=2.4.0,<3.0.0",
    "schedule>=1.2.0,<2.0.0",
    "rich>=13.0.0,<14.0.0",
    "tqdm>=4.64.0,<5.0.0",
    "psutil>=5.9.0,<6.0.0",
    "python-dateutil>=2.8.0,<3.0.0",
    "jsonschema>=4.19.0,<5.0.0",
    "urllib3>=1.26.0,<3.0.0",
    "certifi>=2023.0.0",
    "memory-profiler>=0.60.0,<1.0.0",
    "aiohttp>=3.8.0,<4.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0,<9.0.0",
    "pytest-asyncio>=0.21.0,<1.0.0",
    "pytest-cov>=4.1.0,<6.0.0",
    "pytest-mock>=3.10.0,<4.0.0",
    "responses>=0.23.0,<1.0.0",
    "black>=23.0.0,<25.0.0",
    "flake8>=6.0.0,<7.0.0",
    "mypy>=1.5.0,<2.0.0",
    "isort>=5.12.0,<6.0.0",
    "coverage>=7.0.0,<9.0.0",
    "pre-commit>=3.0.0,<4.0.0",
    "bandit>=1.7.5,<2.0.0",
]
docs = [
    "sphinx>=7.0.0,<8.0.0",
    "sphinx-rtd-theme>=1.3.0,<2.0.0",
    "mkdocs>=1.5.0,<2.0.0",
    "mkdocs-material>=9.0.0,<10.0.0",
]
async = [
    "asyncio-mqtt>=0.16.0,<1.0.0",
    "aioresponses>=0.7.4,<1.0.0",
]
monitoring = [
    "prometheus-client>=0.17.0,<1.0.0",
]

[project.scripts]
oran-rag = "main:main"
oran-rag-sync = "scripts.auto_sync:main"
oran-rag-test = "scripts.test_system:main"

[project.urls]
Homepage = "https://github.com/company/oran-nephio-rag"
Documentation = "https://oran-nephio-rag.readthedocs.io/"
Repository = "https://github.com/company/oran-nephio-rag"
"Bug Tracker" = "https://github.com/company/oran-nephio-rag/issues"

# Tool configurations
[tool.setuptools.packages.find]
include = ["src*"]

[tool.setuptools.package-data]
"*" = ["*.md", "*.txt", "*.yml", "*.yaml", "*.json"]

[tool.black]
line-length = 120
target-version = ['py39', 'py310', 'py311', 'py312', 'py313']
include = '\.pyi?$'
extend-exclude = '''
/(
  \.venv
  | \.git
  | \.pytest_cache
  | __pycache__
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 120
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.bandit]
exclude_dirs = ["tests", "build", "dist", ".venv", "venv"]
skips = ["B101", "B601"]  # Skip assert_used and shell_injection in tests

[tool.flake8]
max-line-length = 120
exclude = [
    ".git",
    "__pycache__",
    ".venv",
    "venv",
    "build",
    "dist",
    "*.egg-info",
]
ignore = [
    "E203",  # whitespace before ':'
    "E501",  # line too long (handled by black)
    "W503",  # line break before binary operator
]