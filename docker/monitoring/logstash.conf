# O-RAN × Nephio RAG 系統 Logstash 配置
# 日誌收集、處理和轉發配置

input {
  # Docker 容器日誌輸入
  beats {
    port => 5044
    type => "docker-logs"
  }
  
  # 檔案日誌輸入 (應用程式日誌)
  file {
    path => "/data/oran-rag/logs/*.log"
    start_position => "beginning"
    type => "application-logs"
    codec => "json"
    tags => ["oran-rag", "application"]
  }
  
  # Syslog 輸入
  syslog {
    port => 514
    type => "syslog"
    tags => ["system", "syslog"]
  }
  
  # HTTP 輸入 (用於應用程式直接發送日誌)
  http {
    port => 8080
    type => "http-logs"
    codec => "json"
    tags => ["http-input"]
  }
  
  # Redis 輸入 (用於高可用日誌緩衝)
  redis {
    host => "redis-master"
    port => 6379
    password => "${REDIS_PASSWORD}"
    data_type => "list"
    key => "oran-rag-logs"
    type => "redis-logs"
    tags => ["redis-buffer"]
  }
}

filter {
  # 基本欄位處理
  if [type] == "docker-logs" {
    # 解析 Docker 容器日誌
    grok {
      match => { "message" => "%{TIMESTAMP_ISO8601:timestamp} %{LOGLEVEL:level} %{GREEDYDATA:log_message}" }
    }
    
    # 解析容器資訊
    if [docker][container][name] {
      mutate {
        add_field => { "container_name" => "%{[docker][container][name]}" }
        add_field => { "container_id" => "%{[docker][container][id]}" }
      }
    }
  }
  
  # 應用程式日誌處理
  if [type] == "application-logs" {
    # 解析 JSON 格式日誌
    if [message] =~ /^\{/ {
      json {
        source => "message"
        target => "app_log"
      }
      
      # 提取關鍵欄位
      if [app_log][timestamp] {
        date {
          match => [ "[app_log][timestamp]", "ISO8601" ]
          target => "@timestamp"
        }
      }
      
      if [app_log][level] {
        mutate {
          add_field => { "level" => "%{[app_log][level]}" }
        }
      }
      
      if [app_log][message] {
        mutate {
          add_field => { "log_message" => "%{[app_log][message]}" }
        }
      }
      
      # 處理異常資訊
      if [app_log][exception] {
        mutate {
          add_field => { "exception_type" => "%{[app_log][exception][type]}" }
          add_field => { "exception_message" => "%{[app_log][exception][message]}" }
          add_field => { "stack_trace" => "%{[app_log][exception][stack_trace]}" }
        }
        mutate {
          add_tag => [ "exception" ]
        }
      }
      
      # 處理 RAG 特定欄位
      if [app_log][query_id] {
        mutate {
          add_field => { "query_id" => "%{[app_log][query_id]}" }
          add_field => { "query_text" => "%{[app_log][query_text]}" }
          add_field => { "response_time" => "%{[app_log][response_time]}" }
          add_field => { "documents_retrieved" => "%{[app_log][documents_retrieved]}" }
        }
        mutate {
          add_tag => [ "rag-query" ]
        }
      }
    } else {
      # 處理純文本日誌
      grok {
        match => { 
          "message" => "%{TIMESTAMP_ISO8601:timestamp} \[%{LOGLEVEL:level}\] %{GREEDYDATA:log_message}" 
        }
      }
    }
  }
  
  # 系統日誌處理
  if [type] == "syslog" {
    grok {
      match => { 
        "message" => "%{SYSLOGTIMESTAMP:timestamp} %{IPORHOST:host} %{WORD:program}(?:\[%{POSINT:pid}\])?: %{GREEDYDATA:log_message}" 
      }
    }
    
    date {
      match => [ "timestamp", "MMM dd HH:mm:ss", "MMM  d HH:mm:ss" ]
    }
  }
  
  # 安全相關日誌標記
  if [log_message] =~ /(error|Error|ERROR|fail|Fail|FAIL|exception|Exception|EXCEPTION)/ {
    mutate {
      add_tag => [ "error" ]
    }
  }
  
  if [log_message] =~ /(warn|Warn|WARN|warning|Warning|WARNING)/ {
    mutate {
      add_tag => [ "warning" ]
    }
  }
  
  if [log_message] =~ /(unauthorized|Unauthorized|UNAUTHORIZED|forbidden|Forbidden|FORBIDDEN|denied|Denied|DENIED)/ {
    mutate {
      add_tag => [ "security", "access-denied" ]
    }
  }
  
  if [log_message] =~ /(attack|Attack|ATTACK|malicious|Malicious|MALICIOUS|intrusion|Intrusion|INTRUSION)/ {
    mutate {
      add_tag => [ "security", "threat" ]
    }
  }
  
  # 效能相關標記
  if [response_time] {
    ruby {
      code => "
        response_time = event.get('response_time').to_f
        if response_time > 5.0
          event.set('performance_status', 'slow')
          event.tag('slow-response')
        elsif response_time > 2.0
          event.set('performance_status', 'warning')
          event.tag('warning-response')
        else
          event.set('performance_status', 'normal')
        end
      "
    }
  }
  
  # 地理位置資訊 (如果有 IP 地址)
  if [client_ip] {
    geoip {
      source => "client_ip"
      target => "geoip"
    }
  }
  
  # 使用者代理解析
  if [user_agent] {
    useragent {
      source => "user_agent"
      target => "ua"
    }
  }
  
  # 移除不需要的欄位
  mutate {
    remove_field => [ "host", "port", "path", "tags" ]
  }
  
  # 正規化時間戳
  if ![timestamp] {
    mutate {
      add_field => { "timestamp" => "%{@timestamp}" }
    }
  }
  
  # 添加環境資訊
  mutate {
    add_field => { 
      "environment" => "${APP_ENV:development}"
      "service" => "oran-rag"
      "version" => "${VERSION:latest}"
    }
  }
}

output {
  # 根據環境決定輸出目標
  if "${APP_ENV}" == "production" {
    # 生產環境: 輸出到 Elasticsearch
    elasticsearch {
      hosts => ["${ELASTICSEARCH_HOSTS}"]
      index => "oran-rag-logs-prod-%{+YYYY.MM.dd}"
      template_name => "oran-rag-template"
      template => "/etc/logstash/templates/oran-rag-template.json"
      template_overwrite => true
      
      # 身份驗證
      user => "${ELASTICSEARCH_USERNAME}"
      password => "${ELASTICSEARCH_PASSWORD}"
      
      # SSL 設定
      ssl => true
      ssl_certificate_verification => true
      cacert => "/etc/logstash/certs/ca.crt"
      
      # 效能設定
      workers => 4
      flush_size => 1000
      idle_flush_time => 10
    }
    
    # 錯誤日誌額外發送到 Slack
    if "error" in [tags] or "exception" in [tags] {
      http {
        url => "${SLACK_WEBHOOK_URL}"
        http_method => "post"
        format => "json"
        mapping => {
          "text" => "🚨 O-RAN RAG Error Alert: %{log_message}"
          "channel" => "#oran-rag-alerts"
          "username" => "Logstash"
        }
      }
    }
    
    # 安全威脅日誌發送到安全系統
    if "security" in [tags] and "threat" in [tags] {
      http {
        url => "${SECURITY_WEBHOOK_URL}"
        http_method => "post"
        format => "json"
        headers => {
          "Authorization" => "Bearer ${SECURITY_API_TOKEN}"
        }
        mapping => {
          "alert_type" => "security_threat"
          "service" => "oran-rag"
          "message" => "%{log_message}"
          "timestamp" => "%{@timestamp}"
          "source_ip" => "%{client_ip}"
          "severity" => "high"
        }
      }
    }
    
  } else {
    # 開發環境: 輸出到 stdout 和本地檔案
    stdout {
      codec => rubydebug
    }
    
    file {
      path => "/data/oran-rag/logs/processed/logstash-%{+YYYY.MM.dd}.log"
      codec => json_lines
    }
  }
  
  # 指標輸出到 Prometheus (通過 HTTP 推送)
  if [response_time] {
    http {
      url => "http://pushgateway:9091/metrics/job/logstash/instance/oran-rag"
      http_method => "post"
      format => "form"
      mapping => {
        "rag_response_time_seconds" => "%{response_time}"
        "rag_query_total" => "1"
      }
    }
  }
  
  # 將處理過的日誌發送到 Redis (作為其他系統的緩衝)
  redis {
    host => "redis-master"
    port => 6379
    password => "${REDIS_PASSWORD}"
    data_type => "list"
    key => "processed-logs"
    codec => json
  }
  
  # 儲存到檔案 (備份用途)
  file {
    path => "/data/oran-rag/logs/backup/logstash-backup-%{+YYYY.MM.dd}.log.gz"
    codec => json_lines
    gzip => true
  }
}

# 額外的管道設定 (用於特殊處理)
pipeline {
  id => "security-pipeline"
  config.string => "
    input { 
      pipeline { 
        address => security 
      } 
    }
    filter {
      # 安全日誌特殊處理
      if [client_ip] {
        # 檢查是否為已知惡意 IP
        translate {
          source => 'client_ip'
          target => 'threat_status'
          dictionary_path => '/etc/logstash/threat-ips.yml'
          fallback => 'clean'
        }
      }
      
      # 異常模式檢測
      if [log_message] =~ /(sql injection|SQL injection|xss|XSS|csrf|CSRF)/ {
        mutate {
          add_tag => [ 'attack-pattern' ]
          add_field => { 'attack_type' => 'web-attack' }
        }
      }
    }
    output { 
      elasticsearch {
        hosts => ['${ELASTICSEARCH_HOSTS}']
        index => 'oran-rag-security-%{+YYYY.MM.dd}'
        user => '${ELASTICSEARCH_USERNAME}'
        password => '${ELASTICSEARCH_PASSWORD}'
      }
    }
  "
}